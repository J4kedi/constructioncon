generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// ENUMs - Tipos de Dados Padronizados
// ===================================

enum UserRole {
  SUPER_ADMIN
  COMPANY_ADMIN
  USER
  END_CUSTOMER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum StatusObra {
  PLANEJAMENTO
  EM_ANDAMENTO
  PAUSADA
  CONCLUIDA
  CANCELADA
}

enum ObraType {
  RESIDENCIAL
  COMERCIAL
}

enum StatusEtapa {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDA
}

enum CategoriaDespesa {
  MATERIAL
  MAO_DE_OBRA
  EQUIPAMENTO
  ADMINISTRATIVO
  OUTROS
}

enum StatusContaPagar {
  A_PAGAR
  PAGO
  VENCIDO
}

enum StatusContaReceber {
  A_RECEBER
  RECEBIDO
  VENCIDO
}

enum DocumentType {
  PLANTA_BAIXA
  ALVARA
  ART // Anotação de Responsabilidade Técnica
  MEMORIAL_DESCRITIVO
  CONTRATO
  NOTA_FISCAL_SERVICO
  NOTA_FISCAL_PRODUTO
  BOLETO
  OUTRO
}

enum UnidadeMedida {
  UN  // Unidade
  M   // Metro
  M2  // Metro Quadrado
  M3  // Metro Cúbico
  KG  // Quilograma
  L   // Litro
  CX  // Caixa
  PCT // Pacote
}

enum TipoMovimento {
  ENTRADA
  SAIDA
  AJUSTE
}

// ===================================
// Modelos de Dados (Tabelas)
// ===================================

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  schemaName String  @unique // Nome do schema no DB (ex: tenant_construtora_a)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenants")
  features Feature[]
}

model Feature {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  href        String   @default("")
  icon        String   @default("")

  parentId    String?
  parent      Feature? @relation("FeatureHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Feature[] @relation("FeatureHierarchy")

  tenants     Tenant[]
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  cnpj      String?  @unique
  logoUrl   String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  obras         Obra[]
  addresses     Address[]
  catalogoItens CatalogoItem[]
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String
  password           String
  role               UserRole  @default(USER)
  jobTitle           String?
  phone              String?
  avatarUrl          String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  companyId          String
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  obrasComoCliente       Obra[]
  etapasResponsaveis     Etapa[]            @relation("ResponsibleForEtapas")
  contasPagarAprovadas   ContaPagar[]       @relation("ApprovedDespesas")
  diariosDeObra          WorkLog[]
  movimentacoesDeEstoque EstoqueMovimento[]
}

model Obra {
  id                 String     @id @default(cuid())
  nome               String
  type               ObraType   @default(RESIDENCIAL)
  address            String?
  endCustomerName    String
  orcamentoTotal     Decimal
  currentCost        Decimal    @default(0)
  progressPercentage Float      @default(0)
  dataInicio         DateTime
  dataPrevistaFim    DateTime
  status             StatusObra @default(PLANEJAMENTO)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  companyId          String
  company            Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  endCustomerId      String?
  endCustomer        User?      @relation(fields: [endCustomerId], references: [id], onDelete: SetNull)

  etapas                 Etapa[]
  contasPagar            ContaPagar[]
  contasReceber          ContaReceber[]
  workLogs               WorkLog[]
  documents              Document[]
  movimentacoesDeEstoque EstoqueMovimento[]

  @@unique([companyId, nome])
  @@index([status])
  @@index([dataPrevistaFim])
}

model Etapa {
  id                   String      @id @default(cuid())
  nome                 String
  custoPrevisto        Decimal
  dataInicioPrevista   DateTime
  dataFimPrevista      DateTime
  dataInicioReal       DateTime?
  dataFimReal          DateTime?
  progressPercentage   Float       @default(0)
  status               StatusEtapa @default(PENDENTE)

  obraId               String
  obra                 Obra        @relation(fields: [obraId], references: [id], onDelete: Cascade)

  responsibleId        String?
  responsible          User?       @relation("ResponsibleForEtapas", fields: [responsibleId], references: [id], onDelete: SetNull)

  @@index([status])
}

model ContaPagar {
  id             String           @id @default(cuid())
  fornecedor     String
  valor          Decimal
  categoria      CategoriaDespesa
  dataEmissao    DateTime         @default(now())
  dataVencimento DateTime
  anexoUrl       String?
  status         StatusContaPagar @default(A_PAGAR)

  obraId         String?
  obra           Obra?            @relation(fields: [obraId], references: [id], onDelete: Cascade)

  approverId     String?
  approver       User?            @relation("ApprovedDespesas", fields: [approverId], references: [id], onDelete: SetNull)

  supplierId     String?
  supplier       Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  documents      Document[]
}

model ContaReceber {
  id             String             @id @default(cuid())
  cliente        String
  descricao      String
  valor          Decimal
  dataEmissao    DateTime           @default(now())
  dataVencimento DateTime
  status         StatusContaReceber @default(A_RECEBER)
  anexoUrl       String?

  obraId         String
  obra           Obra               @relation(fields: [obraId], references: [id], onDelete: Cascade)

  documents      Document[]
}

model Supplier {
  id                  String             @id @default(cuid())
  name                String
  cnpj                String?            @unique
  phone               String?
  email               String?

  contasPagar         ContaPagar[]
  addresses           Address[]
  movimentosDeEstoque EstoqueMovimento[]
}

model WorkLog {
  id       String   @id @default(cuid())
  date     DateTime
  notes    String   @db.Text
  photos   String[]

  obraId   String
  obra     Obra     @relation(fields: [obraId], references: [id], onDelete: Cascade)

  authorId String?
  author   User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@index([date])
}

model Document {
  id         String       @id @default(cuid())
  name       String
  url        String
  type       DocumentType
  uploadedAt DateTime     @default(now())

  obraId     String
  obra       Obra         @relation(fields: [obraId], references: [id], onDelete: Cascade)

  contaPagarId   String?
  contaPagar     ContaPagar?  @relation(fields: [contaPagarId], references: [id], onDelete: SetNull)

  contaReceberId String?
  contaReceber   ContaReceber?@relation(fields: [contaReceberId], references: [id], onDelete: SetNull)
}

model Address {
  id           String  @id @default(cuid())
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isPrimary    Boolean @default(false)

  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  supplierId   String?
  supplier     Supplier? @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([supplierId])
}

model CatalogoItem {
  id             String   @id @default(cuid())
  nome           String
  descricao      String?
  unidade        UnidadeMedida
  categoria      String?
  custoUnitario  Decimal  @default(0)
  nivelMinimo    Decimal  @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  movimentos     EstoqueMovimento[]
  companyId      String
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, nome])
}

model EstoqueMovimento {
  id              String        @id @default(cuid())
  quantidade      Decimal
  tipo            TipoMovimento
  data            DateTime      @default(now())
  
  catalogoItemId  String
  catalogoItem    CatalogoItem  @relation(fields: [catalogoItemId], references: [id], onDelete: Cascade)

  obraDestinoId   String?
  obraDestino     Obra?         @relation(fields: [obraDestinoId], references: [id], onDelete: SetNull)
  
  usuarioId       String?
  usuario         User?         @relation(fields: [usuarioId], references: [id], onDelete: SetNull)

  supplierId      String?
  supplier        Supplier?     @relation(fields: [supplierId], references: [id], onDelete: SetNull)
}
model Atividade_Cronograma {
  id           String   @id @default(uuid())
  descricao    String
  responsavel  String
  inicio       DateTime
  fim          DateTime
  duracaoDias  Int
  createdAt    DateTime @default(now())
}
